package net.jakush.databaseapi.interfaces.commandtypes;

import net.jakush.databaseapi.interfaces.Database;
import net.jakush.databaseapi.interfaces.DatabaseProperty;
import net.jakush.databaseapi.serializers.DatabasePropertySerializer;
import org.jetbrains.annotations.NotNull;

import java.util.List;

import net.jakush.databaseapi.databasetype.mysql.CommandType;

/**
 * This file is a part of DatabaseAPI <br>
 * Author: <a href="https://github.com/Jakush">Jakush</a><br>
 * <br>
 * Interface for {@link CommandType#INSERT_INTO}
 */
public interface InsertCommand extends SnapshotCommand {

    /**
     * This is which properties should be selected <br>
     * Input can be generated by changing list to your own wants from {@link Database#getProperties(String)} <br>
     * Or by using serializer {@link DatabasePropertySerializer}
     * @param tableProperties tableProperties
     * @return builder (to make value-chain possible)
     */
    InsertCommand setProperties(final @NotNull List<DatabaseProperty> tableProperties);

    /**
     * Sets values <br>
     * Example of this is: <br>
     * <br>
     * Already put string without this method will look like <br>
     * <b>INSERT INTO table</b> <br>
     * And now you need to put there also values - (..., ...) <br>
     * Which obviously does this method
     * @param valueList values
     * @return builder (to make value-chain possible)
     */
    InsertCommand setValues(final @NotNull List<String> valueList);

    /**
     * Sets table
     * @param tableName table name to set
     * @return builder (to make value-chain possible)
     */
    InsertCommand setTable(final @NotNull String tableName);
}

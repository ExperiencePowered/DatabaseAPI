package net.jakush.databaseapi.interfaces.commandtypes;

import net.jakush.databaseapi.enums.CommandType;
import net.jakush.databaseapi.interfaces.DatabaseProperty;
import net.jakush.databaseapi.interfaces.SnapshotCondition;
import net.jakush.databaseapi.interfaces.Database;
import net.jakush.databaseapi.serializers.DatabasePropertySerializer;
import org.jetbrains.annotations.NotNull;

import java.util.List;

/**
 * This file is a part of DatabaseAPI <br>
 * Author: <a href="https://github.com/Jakush">Jakush</a><br>
 * <br>
 * Interface for {@link CommandType#SELECT}
 */
public interface SelectCommand extends QueryCommand {
    interface Builder extends QueryCommand.Builder {
        /**
         * This is which properties should be selected <br>
         * Input can be generated by changing list to your own wants from {@link Database#getProperties(String)} <br>
         * Or by using serializer {@link DatabasePropertySerializer}
         * @param tableProperties tableProperties
         * @return builder (to make value-chain possible)
         */
        Builder setWhich(final @NotNull List<DatabaseProperty> tableProperties);

        /**
         * In translate to MySQL commands, this means <br>
         * <b>WHERE something = '...'</b>
         * @param condition condition
         * @return builder (to make value-chain possible)
         */
        Builder setCondition(final @NotNull SnapshotCondition condition);
    }
}
